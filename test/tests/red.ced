module red.

import Trm.

% beta-reduction
red ◂ trm ➔ trm ➔ ★ =
      λ t1 : trm . λ t2 : trm . ∀ X : trm ➔ trm ➔ ★ . 
        (∀ f : trm ➔ trm . ∀ t : trm .
           X (app (lam f) t) (f t)) ➔
        (∀ t1 : trm . ∀ t1' : trm . ∀ t2 : trm .
           X t1 t1' ➔ 
           X (app t1 t2) (app t1' t2)) ➔
        (∀ t1 : trm . ∀ t2 : trm . ∀ t2' : trm .
           X t2 t2' ➔ 
           X (app t1 t2) (app t1 t2')) ➔
        (∀ f : trm ➔ trm . ∀ f' : trm ➔ trm.
           (∀ n : Nat . X (f (var n)) (f' (var n))) ➔ X (lam f) (lam f')) ➔
        X t1 t2 .
           
red-beta ◂ ∀ f : trm ➔ trm . ∀ t : trm .
           red (app (lam f) t) (f t) =
 Λ f . Λ t . Λ X . λ beta . λ app1 . λ app2 . λ xi . beta -f -t .

red-app1 ◂ ∀ t1 : trm . ∀ t1' : trm . ∀ t2 : trm .
           red t1 t1' ➔
           red (app t1 t2) (app t1' t2) =
 Λ t1 . Λ t1' . Λ t2 . λ r .
   Λ X . λ beta . λ app1 . λ app2 . λ xi . app1 -t1 -t1' -t2 (r · X beta app1 app2 xi) .

red-app2 ◂ ∀ t1 : trm . ∀ t2 : trm . ∀ t2' : trm .
           red t2 t2' ➔
           red (app t1 t2) (app t1 t2') =
 Λ t1 . Λ t2 . Λ t2' . λ r .
   Λ X . λ beta . λ app1 . λ app2 . λ xi . app2 -t1 -t2 -t2' (r · X beta app1 app2 xi) .

red-xi ◂ ∀ f : trm ➔ trm . ∀ f' : trm ➔ trm .
         (∀ n : Nat . red (f (var n)) (f' (var n))) ➔
         red (lam f) (lam f') =
 Λ f . Λ f' . λ r .
   Λ X . λ beta . λ app1 . λ app2 . λ xi . xi -f -f' (Λ t . r -t · X beta app1 app2 xi) .

test ◂ red (lam (λ x . (app (lam (λ z . z)) x))) (lam (λ x . x)) =
  red-xi -(λ x . (app (lam (λ z . z)) x)) -(λ x . x)
    (Λ x . red-beta -(λ z . z) -(var x)).

