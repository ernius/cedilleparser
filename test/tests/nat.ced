module Nat .

import cnat.

cNatInductive ◂ cNat ➔ ★ = λ x : cNat . ∀ Q : cNat ➔ ★ . (∀ x : cNat . Q x ➔ Q (cS x)) ➔ Q cZ ➔ Q x.

Nat ◂ ★ = ι x : cNat . cNatInductive x.

Z ◂ Nat = [ cZ , Λ X . λ s . λ z . z ] .
S ◂ Nat ➔ Nat = λ n . [ cS n.1 , Λ P . λ s . λ z . s -n.1 (n.2 · P s z) ] .

NatRec ◂ Nat ➔ cNat = λ n . n.1 .

add ◂ Nat ➔ Nat ➔ Nat = λ m . λ n . NatRec m · Nat S n .

mult ◂ Nat ➔ Nat ➔ Nat = λ m . λ n . NatRec m · Nat (add n) Z .

exp ◂ Nat ➔ Nat ➔ Nat = λ m . λ n . NatRec n · Nat (mult m) (S Z) .

NatInd ◂ Π x : Nat . ∀ Q : Nat ➔ ★ . (∀ x : Nat . Q x ➔ Q (S x)) ➔ Q Z ➔ Q x =
  λ x . Λ Q . λ s . λ z . a
    x.2 · (λ x : cNat . ∀ X : ★ . (Π x' : Nat . { x ≃ x' } ➔ Q x' ➔ X) ➔ X)
     (Λ x' . λ ih . Λ X . λ c . ih · X (λ x'' . λ e . λ u . c (S x'') (ρ e - β) (s -x'' u)))
     (Λ X . λ c . c Z β z) · (Q x) (λ x' . λ e . λ u . ρ e - u).



