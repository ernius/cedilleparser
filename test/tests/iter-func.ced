module iterfunc.

import and.
import false.
import or.
import true.
import sigma.
import this-nat.

Iter ◂ (★ ➔ ★) ➔ Nat ➔ ★ =
  λ F : ★ ➔ ★ . λ n : Nat .
    ↑ X . (to-cNat n) · X : ((☆ ➔ ☆) ➔ ☆ ➔ ☆)
          · (λ R : ★ . F · R)
          · False .

Functor ◂ (★ ➔ ★) ➔ ★ = λ F : ★ ➔ ★ . ∀ X : ★ . ∀ Y : ★ . (X ➔ Y) ➔ (F · X ➔ F · Y) .

Fix ◂ (★ ➔ ★) ➔ ★ = λ F : ★ ➔ ★ . Sigma · Nat · (Iter · F).

fold ◂ ∀ F : ★ ➔ ★ . Functor · F ➔ ∀ X : ★ . (F · X ➔ X) ➔ Fix · F ➔ X =
  Λ F . λ FF . Λ X . λ k . λ t .
    t · (λ _ : Fix · F . X)
      (λ n . n · (λ n : Nat . (Iter · F n) ➔ X)
                 (Λ n : Nat . λ r . λ i . k (FF · (Iter · F n) · X r i))
                 (λ u . u · X) ).
    
in ◂ ∀ F : ★ ➔ ★ . Functor · F ➔ F · (Fix · F) ➔ Fix · F = ● .

out ◂ ∀ F : ★ ➔ ★ . Functor · F ➔ Fix · F ➔ F · (Fix · F) =
  Λ F . λ FF . fold · F FF · (F · (Fix · F)) (FF · (F · (Fix · F)) · (Fix · F) (in · F FF))  .

ListF ◂ ★ ➔ ★ ➔ ★ = λ A : ★ . λ X : ★ . Or · True · (And · A · X) .

List ◂ ★ ➔ ★ = λ A : ★ . Fix · (ListF · A) .


